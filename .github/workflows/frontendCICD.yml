# This workflow will do a clean installation of node dependencies, cache/restore them,
# build the source code, run tests, scan with SonarQube, and deploy to AWS S3 & EC2.

name: frontend_CICD

on:
  push:
    branches: [ "main" ]  # Runs automatically on push to main branch
  workflow_dispatch:  # Allows manual trigger from GitHub Actions UI

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]  # Set Node.js version

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Debug Workspace Contents
      run: ls -R  

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Install Dependencies
      run: npm ci

    - name: Build Frontend
      run: npm run build --if-present

    - name: SonarQube Frontend Scan
      uses: sonarsource/sonarqube-scan-action@master
      with:
        args: >
          -Dproject.settings=sonar-project.properties
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} 

    - name: Check SonarQube Quality Gate
      uses: sonarsource/sonarqube-quality-gate-action@master
      if: always()  # Ensures the check runs even if the scan fails
      timeout-minutes: 5
      with:
        scanTaskId: ${{ steps.sonarqube.outputs.scanTaskId }}
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} 

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ap-south-1  # Update to your AWS region

    - name: Upload to S3
      run: aws s3 sync . s3://${{ secrets.AWS_S3_BUCKET }} --delete
      
    - name: Deploy to EC2
      run: aws deploy create-deployment --application-name webapp --deployment-group-name CodeDeployWebapp --github-location repository=${{ github.repository }},commitId=${{ github.sha }} --ignore-application-stop-failures

 
